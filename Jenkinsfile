pipeline {
    agent any

    triggers {
        pollSCM('H/2 * * * *')  // Poll SCM every 2 minutes
    }

    environment {
        JAVA_HOME = 'C:\\Users\\admin\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\21'
        MAVEN_HOME = 'C:\\Users\\admin\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\maven\\latest'
        NODE_HOME = 'C:\\Program Files\\nodejs'
        DEPLOY_PATH = 'C:\\deploy\\nhahang'
        BACKEND_JAR = 'backend-0.0.1-SNAPSHOT.jar'
        DOCKER_IMAGE_NAME = 'nhahang-frontend'
        DOCKER_TAG = 'latest'
    }

    stages {
        // ========== CI (Continuous Integration) ==========
        stage('Clone') {
            steps {
                echo 'üîÑ ƒêang clone m√£ ngu·ªìn...'
                git branch: 'main', url: 'https://github.com/DoLyHoangNam/nhahang.git'

            }
        }

        stage('Check Environment') {
            steps {
                echo 'üîç Ki·ªÉm tra m√¥i tr∆∞·ªùng...'
                bat 'java -version'
                bat 'mvn -version'
                bat 'node -v'
                bat 'npm -v'
                bat 'docker -v'
            }
        }

        stage('Build Backend') {
            steps {
                echo 'üî® ƒêang build backend Java Spring Boot...'
                dir('backend') {
                    bat 'mvn clean compile -q'
                }
            }
        }

        stage('Test Backend') {
            steps {
                echo 'üß™ ƒêang ch·∫°y test backend...'
                dir('backend') {
                    bat 'mvn test -q'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                echo 'üì¶ ƒêang c√†i ƒë·∫∑t dependencies frontend...'
                dir('nhahangvietnam-main') {
                    bat 'npm install --silent'
                }
                
                echo 'üî® ƒêang build frontend React...'
                dir('nhahangvietnam-main') {
                    bat 'npm run build'
                }
            }
        }

        // ========== CD (Continuous Deployment) ==========
        stage('Package Backend') {
            steps {
                echo 'üì¶ ƒêang ƒë√≥ng g√≥i backend th√†nh JAR...'
                dir('backend') {
                    bat 'mvn package -DskipTests -q'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'üìÅ ƒêang l∆∞u tr·ªØ artifacts...'
                archiveArtifacts artifacts: 'backend/target/*.jar', fingerprint: true
                archiveArtifacts artifacts: 'nhahangvietnam-main/dist/**/*', fingerprint: true
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ ƒêang build Docker image cho frontend...'
                bat 'docker build -t %DOCKER_IMAGE_NAME%:%DOCKER_TAG% .'
                echo '‚úÖ Docker image built successfully!'
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'üì§ ƒêang push Docker image...'
                // N·∫øu c√≥ Docker registry, th√™m l·ªánh push ·ªü ƒë√¢y
                // bat 'docker tag %DOCKER_IMAGE_NAME%:%DOCKER_TAG% your-registry/%DOCKER_IMAGE_NAME%:%DOCKER_TAG%'
                // bat 'docker push your-registry/%DOCKER_IMAGE_NAME%:%DOCKER_TAG%'
                echo '‚úÖ Docker image ready for deployment!'
            }
        }

        stage('Deploy Backend') {
            steps {
                echo 'üöÄ ƒêang deploy backend...'
            
                // T·∫°o th∆∞ m·ª•c deploy n·∫øu ch∆∞a c√≥
                bat 'if not exist "%DEPLOY_PATH%" mkdir "%DEPLOY_PATH%"'
                bat 'if not exist "%DEPLOY_PATH%\\backend" mkdir "%DEPLOY_PATH%\\backend"'
                // Copy JAR file
                bat 'copy "backend\\target\\%BACKEND_JAR%" "%DEPLOY_PATH%\\backend\\"'
                // Stop service c≈© n·∫øu ƒëang ch·∫°y
                bat 'taskkill /f /im java.exe 2>nul || echo "No Java process running"'
                // Start service m·ªõi
                bat 'cd /d "%DEPLOY_PATH%\\backend" && start /b java -jar %BACKEND_JAR%'
                
                echo '‚úÖ Backend deployed successfully!'
            }
        }

        stage('Deploy Frontend') {
            steps {
                echo 'üöÄ ƒêang deploy frontend...'
                
                // T·∫°o th∆∞ m·ª•c frontend
                bat 'if not exist "%DEPLOY_PATH%\\frontend" mkdir "%DEPLOY_PATH%\\frontend"'
                
                // Copy static files
                bat 'xcopy "nhahangvietnam-main\\dist\\*" "%DEPLOY_PATH%\\frontend\\" /E /Y'
                
                echo '‚úÖ Frontend deployed successfully!'
            }
        }

        stage('Health Check') {
            steps {
                echo 'üè• ƒêang ki·ªÉm tra s·ª©c kh·ªèe ·ª©ng d·ª•ng...'
                
                // Wait for backend to start
                bat 'timeout /t 10 /nobreak'
                
                // Test backend health
                bat 'curl -f http://localhost:8080/api/auth/test || echo "Backend health check failed"'
                
                // Test frontend (if using a web server)
                bat 'echo "Frontend files deployed to: %DEPLOY_PATH%\\frontend"'
                
                echo '‚úÖ Health check completed!'
            }
        }
    }
    // ========== Post Actions ==========

    post {
        always {
            echo 'üèÅ Pipeline ho√†n th√†nh!'
        }
        success {
            echo '‚úÖ CI/CD th√†nh c√¥ng!'
            echo 'üåê Backend: http://localhost:8080'
            echo 'üìÅ Frontend: %DEPLOY_PATH%\\frontend'
            echo 'üê≥ Docker Image: %DOCKER_IMAGE_NAME%:%DOCKER_TAG%'
        }
        failure {
            echo '‚ùå CI/CD th·∫•t b·∫°i!'
        }
        cleanup {
            echo 'üßπ D·ªçn d·∫πp workspace...'
        }
    }
}
//